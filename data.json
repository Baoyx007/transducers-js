{
    "project": {
        "name": "transducers-js",
        "description": "A Transducers implementation for JavaScript",
        "version": "0.4.101",
        "url": "http://github.com/cognitect-labs/transducers-js"
    },
    "files": {
        "src/com/cognitect/transducers.js": {
            "name": "src/com/cognitect/transducers.js",
            "modules": {},
            "classes": {
                "transducers": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "transducers": {
            "name": "transducers",
            "shortname": "transducers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/com/cognitect/transducers.js",
            "line": 36
        }
    },
    "classitems": [
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 22,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 25,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 28,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 31,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 74,
            "description": "Take a predicate function and return its complement.",
            "itemtype": "method",
            "name": "transducers.complement",
            "params": [
                {
                    "name": "a",
                    "description": "predicate function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the complement predicate function",
                "type": "Function"
            },
            "example": [
                "\n    var isEven = function(n) { return n % 2 == 0; };\n    var isOdd = transducers.complement(isEven);"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 89,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 105,
            "description": "Take a two-arity reducing function where the first argument is the\naccumluation and the second argument is the next input and convert\nit into a transducer transformer object.",
            "itemtype": "method",
            "name": "transducers.wrap",
            "params": [
                {
                    "name": "stepFn",
                    "description": "a two-arity reducing function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a transducer transformer object",
                "type": "transducers.Wrap"
            },
            "example": [
                "\n    var t = transducers;\n    var arrayPush = t.wrap(function(arr, x) { arr.push(x); return arr; });"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 123,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 130,
            "description": "Return a reduced value. Reduced values short circuit transduce.",
            "itemtype": "method",
            "name": "transducers.reduced",
            "params": [
                {
                    "name": "x",
                    "description": "any JavaScript value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a reduced value",
                "type": "transducers.Reduced"
            },
            "example": [
                "\n    var reduced = transducers.reduced(1);"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 142,
            "description": "Check if a value is reduced.",
            "itemtype": "method",
            "name": "transducers.isReduced",
            "params": [
                {
                    "name": "x",
                    "description": "any JavaScript value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the value is an instance of transducers.Reduced\n  false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    var t = transducers;\n    t.isReduced(1); // false\n    t.isReduced(t.reduced(1)); // true"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 157,
            "description": "Ensure that a value is reduced. If already reduced will not re-wrap.",
            "itemtype": "method",
            "name": "transducers.ensureReduced",
            "params": [
                {
                    "name": "x",
                    "description": "any JavaScript value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a reduced value.",
                "type": "transducers.Reduced"
            },
            "example": [
                "\n    var t = transducers;\n    var x = t.ensureReduced(1);\n    var y = t.ensureReduced(x);\n    x === y; // true"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 176,
            "description": "Ensure a value is not reduced. Unwraps if reduced.",
            "itemtype": "method",
            "name": "transducers.unreduced",
            "params": [
                {
                    "name": "x",
                    "description": "any JavaScript value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a JavaScript value",
                "type": "Object"
            },
            "example": [
                "\n    var t = transducers;\n    var x = t.reduced(1);\n    t.unreduced(x); // 1\n    t.unreduced(t.unreduced(x)); // 1"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 195,
            "description": "Identity function.",
            "itemtype": "method",
            "name": "transducers.identiy",
            "params": [
                {
                    "name": "x",
                    "description": "any JavaScript value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a JavaScript value",
                "type": "Object"
            },
            "example": [
                "\n    transducers.identity(1); // 1"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 207,
            "description": "Function composition. Take N function and return their composition.",
            "itemtype": "method",
            "name": "transducers.comp",
            "params": [
                {
                    "name": "varArgs",
                    "description": "N functions",
                    "type": "Function"
                }
            ],
            "result": "{Function} a function that represent the composition of the arguments.",
            "example": [
                "\n    var t = transducers;\n    var inc = function(n) { return n + 1 };\n    var double = function(n) { return n * 2 };\n    var incDouble = t.comp(double, inc);\n    incDouble(3); // 8"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 236,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 253,
            "description": "Mapping transducer constructor",
            "itemtype": "method",
            "name": "transducers.map",
            "params": [
                {
                    "name": "f",
                    "description": "the mapping operation",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "returns a mapping transducer",
                "type": "transducers.Map"
            },
            "example": [
                "\n    var t = transducers;\n    var inc = function(n) { return n+1; };\n    var xf = t.map(inc);\n    t.into([], xf, [1,2,3]); // [2,3,4]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 274,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 295,
            "description": "Filtering transducer constructor",
            "itemtype": "method",
            "name": "transducers.filter",
            "params": [
                {
                    "name": "pred",
                    "description": "a predicate function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "returns a filtering transducer",
                "type": "transducers.Filter"
            },
            "example": [
                "\n    var t = transducers;\n    var isEven = function(n) { return n % 2 == 0; };\n    var xf = t.filter(isEven);\n    t.into([], xf, [0,1,2,3,4]); // [0,2,4];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 316,
            "description": "Similar to filter except the predicate is used to\neliminate values.",
            "itemtype": "method",
            "name": "transducers.remove",
            "params": [
                {
                    "name": "pred",
                    "description": "a predicate function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "returns a removing transducer",
                "type": "transducers.Filter"
            },
            "example": [
                "\n    var t = transducers;\n    var isEven = function(n) { return n % 2 == 0; };\n    var xf = t.remove(isEven);\n    t.into([], xf, [0,1,2,3,4]); // [1,3];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 336,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 359,
            "description": "A take transducer constructor. Will take n values before\nreturning a reduced result.",
            "itemtype": "method",
            "name": "transducers.take",
            "params": [
                {
                    "name": "n",
                    "description": "the number of inputs to receive.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a take transducer",
                "type": "transducers.Take"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.take(3);\n    t.into([], xf, [0,1,2,3,4,5]); // [0,1,2];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 380,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 401,
            "description": "Like the take transducer except takes as long as the pred\nreturn true for inputs.",
            "itemtype": "method",
            "name": "transducers.takeWhile",
            "params": [
                {
                    "name": "pred",
                    "description": "a predicate function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a takeWhile transducer",
                "type": "transducers.TakeWhile"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.takeWhile(function(n) { return n < 3; });\n    t.into([], xf, [0,1,2,3,4,5]); // [0,1,2];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 422,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 445,
            "description": "A transducer that takes every Nth input",
            "itemtype": "method",
            "name": "transducers.takeNth",
            "params": [
                {
                    "name": "n",
                    "description": "an integer",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a takeNth transducer",
                "type": "transducers.TakeNth"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.takeNth(3);\n    t.into([], xf, [0,1,2,3,4,5]); // [2,5];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 468,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 490,
            "description": "A dropping transducer constructor",
            "itemtype": "method",
            "name": "transducers.drop",
            "params": [
                {
                    "name": "n",
                    "description": "an integer, the number of inputs to drop.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a dropping transducer",
                "type": "transducers.Drop"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.drop(3);\n    t.into([], xf, [0,1,2,3,4,5]); // [3,4,5];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 510,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 533,
            "description": "A dropping transducer that drop inputs as long as\npred is true.",
            "itemtype": "method",
            "name": "transducers.dropWhile",
            "params": [
                {
                    "name": "pred",
                    "description": "a predicate function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a dropWhile transducer",
                "type": "transducers.DropWhile"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.dropWhile(function(n) { return n < 3; });\n    t.into([], xf, [0,1,2,3,4,5]); // [3,4,5];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 556,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 597,
            "description": "A partitioning transducer. Collects inputs into\narrays as long as predicate remains true for contiguous\ninputs.",
            "itemtype": "method",
            "name": "transducers.partitionBy",
            "params": [
                {
                    "name": "f",
                    "description": "a partition function. When the result\n  for an input changes from the previous result will create\n  a partition.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a partitionBy transducer",
                "type": "transducers.PartitionBy"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.partitionBy(function(x) { return typeof x == \"string\"; });\n    t.into([], xf, [0,1,\"foo\",\"bar\",2,3,\"bar\",\"baz\"]); // [[0,1],[\"foo\",\"bar\"],[2,3],[\"bar\",\"baz\"]];"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 621,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 650,
            "description": "A partitioning transducer. Collects inputs into\narrays of size N.",
            "itemtype": "method",
            "name": "transducers.partitionAll",
            "params": [
                {
                    "name": "n",
                    "description": "an integer",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a partitionAll transducer",
                "type": "transducers.PartitionAll"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.partitionAll(3);\n    t.into([], xf, [0,1,2,3,4,5]); // [[0,1,2],[3,4,5]]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 671,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 693,
            "description": "A keeping transducer. Keep inputs as long as the provided\nfunction does not return null or undefined.",
            "itemtype": "method",
            "name": "transducers.keep",
            "params": [
                {
                    "name": "f",
                    "description": "a function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a keep transducer",
                "type": "transducers.Keep"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.keep(function(x) { if(typeof x == \"string\") return \"cool\"; });\n    t.into([], xf, [0,1,\"foo\",3,4,\"bar\"]); // [\"foo\",\"bar\"]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 715,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 739,
            "description": "Like keep but the provided function will be passed the\nindex as the second argument.",
            "itemtype": "method",
            "name": "transducers.keepIndexed",
            "params": [
                {
                    "name": "f",
                    "description": "a function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a keepIndexed transducer",
                "type": "transducers.KeepIndexed"
            },
            "example": [
                "\n    var t = transducers;\n    var xf = t.keepIndexed(function(x, i) { if(typeof x == \"string\") return \"cool\"; });\n    t.into([], xf, [0,1,\"foo\",3,4,\"bar\"]); // [\"foo\",\"bar\"]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 763,
            "description": "Given a transformer returns a transformer which preserves\nreduced by wrapping one more time. See cat.",
            "itemtype": "method",
            "name": "transducers.preservingReduced",
            "params": [
                {
                    "name": "xf",
                    "description": "a transformer",
                    "type": "Transformer"
                }
            ],
            "return": {
                "description": "a transformer which preserves reduced",
                "type": "Transformer"
            },
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 789,
            "description": "Given a transformer return a concatenating transformer",
            "itemtype": "method",
            "name": "transducers.cat",
            "params": [
                {
                    "name": "xf",
                    "description": "a transformer",
                    "type": "Transformer"
                }
            ],
            "return": {
                "description": "a concatenating transformer",
                "type": "Transformer"
            },
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 810,
            "description": "A mapping concatenating transformer",
            "itemtype": "method",
            "name": "transducers.mapcat",
            "params": [
                {
                    "name": "f",
                    "description": "the mapping function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a mapping concatenating transducer",
                "type": "Transducer"
            },
            "example": [
                "\n    var t = transducers;\n    var reverse = function(arr) { var arr = Array.prototype.slice.call(arr, 0); arr.reverse(); return arr; }\n    var xf = t.mapcat(reverse);\n    t.into([], xf, [[3,2,1],[6,5,4]]); // [1,2,3,4,5,6]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 883,
            "description": "Given a transducer, an intial value and a \ncollection - returns the reduction.",
            "itemtype": "method",
            "name": "transducers.reduce",
            "params": [
                {
                    "name": "xf",
                    "description": "a transducer or two-arity function",
                    "type": "Transducer|Function"
                },
                {
                    "name": "init",
                    "description": "any JavaScript value",
                    "type": "Object"
                },
                {
                    "name": "coll",
                    "description": "any iterable JavaScript value",
                    "type": "String|Array|Object|Iterable"
                }
            ],
            "return": {
                "description": "a iterable JavaScript value: string, array\n  iterable, or object.",
                "type": "Object"
            },
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 908,
            "description": "Given a transducer, a builder function, an initial value\nand a iterable collection - returns the reduction.\ncollection - returns the reduction.",
            "itemtype": "method",
            "name": "transducers.transduce",
            "params": [
                {
                    "name": "xf",
                    "description": "a transducer",
                    "type": "Transducer"
                },
                {
                    "name": "f",
                    "description": "a transducer or two-arity function",
                    "type": "Transducer|Function"
                },
                {
                    "name": "init",
                    "description": "any JavaScript value",
                    "type": "Object"
                },
                {
                    "name": "coll",
                    "description": "any iterable JavaScript value",
                    "type": "String|Array|Object|Iterable"
                }
            ],
            "return": {
                "description": "a JavaScript value.",
                "type": "Object"
            },
            "example": [
                "\n    var t = transducers;\n    var inc = function(n) { return n+1; };\n    var isEven = function(n) { return n % 2 == 0; };\n    var apush = function(arr,x) { arr.push(x); return arr; };\n    var xf = t.comp(t.map(inc),t.filter(isEven));\n    t.transduce(xf, apush, [], [1,2,3,4]); // [2,4]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 946,
            "description": "Reduce a value into the given empty value using a transducer.",
            "itemtype": "method",
            "name": "transducers.into",
            "params": [
                {
                    "name": "empty",
                    "description": "a JavaScript collection",
                    "type": "String|Array|Object"
                },
                {
                    "name": "xf",
                    "description": "a transducer",
                    "type": "Transducer"
                },
                {
                    "name": "coll",
                    "description": "any iterable JavaScript value: array, string,\n  object, or iterable.",
                    "type": "Iterable"
                }
            ],
            "return": {
                "description": "a JavaScript value.",
                "type": "Object"
            },
            "example": [
                "\n    var t = transducers;\n    var inc = function(n) { return n+1; };\n    var isEven = function(n) { return n % 2 == 0; };\n    var apush = function(arr,x) { arr.push(x); return arr; };\n    var xf = t.comp(t.map(inc),t.filter(isEven));\n    t.into([], xf, [1,2,3,4]); // [2,4]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 972,
            "is_constructor": 1,
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 989,
            "description": "A completing transducer constructor. Useful to provide cleanup\nlogic at the end of a reduction/transduction.",
            "itemtype": "method",
            "name": "transducers.completing",
            "params": [
                {
                    "name": "xf",
                    "description": "a transducer",
                    "type": "Transducer"
                },
                {
                    "name": "cf",
                    "description": "a function to apply at the end of the reduction/transduction",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a transducer",
                "type": "Transducer"
            },
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 1007,
            "description": "Convert a tranducer transformer object into a function so\nthat it can be used with existing reduce implementation i.e. native,\nUnderscore, lodash",
            "itemtype": "method",
            "name": "transducers.toFn",
            "params": [
                {
                    "name": "xf",
                    "description": "a transducer",
                    "type": "Transducer"
                },
                {
                    "name": "builder",
                    "description": "a function which take the accumulator and the\n  the next input and return a new accumulator value.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a two-arity function compatible with existing reduce\n  implementations",
                "type": "Function"
            },
            "example": [
                "\n    var t = transducers;\n    var arr = [0,1,2,3,4,5],\n    var apush = function(arr, x) { arr.push(x); return arr; },\n    var xf = t.comp(t.map(inc),t.filter(isEven));\n    arr.reduce(t.toFn(xf, apush), []); // [2,4,6]"
            ],
            "class": "transducers"
        },
        {
            "file": "src/com/cognitect/transducers.js",
            "line": 1035,
            "description": "Return a transducer which simply returns the first input.",
            "itemtype": "method",
            "name": "transducers.first",
            "params": [
                {
                    "name": "xf",
                    "description": "a transducer",
                    "type": "Transducer"
                }
            ],
            "return": {
                "description": "a transducer",
                "type": "Transducer"
            },
            "class": "transducers"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: result",
            "line": " src/com/cognitect/transducers.js:207"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:22"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:25"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:28"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:31"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:89"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:123"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:236"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:274"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:336"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:380"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:422"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:468"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:510"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:556"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:621"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:671"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:715"
        },
        {
            "message": "Missing item type",
            "line": " src/com/cognitect/transducers.js:972"
        }
    ]
}